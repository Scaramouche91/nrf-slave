#include <avr/io.h>
#include <util/delay.h>

#define CE_PIN PD7
#define CSN_PIN PB2
#define MOTOR_IN1 PD5
#define MOTOR_IN2 PD6

void uart_init(unsigned int baud) {
    unsigned int ubrr = F_CPU / 16 / baud - 1; 
    UBRR0H = (unsigned char)(ubrr >> 8); 
    UBRR0L = (unsigned char)ubrr; 
    UCSR0B = (1 << RXEN0) | (1 << TXEN0); 
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); 
}

void uart_transmit(unsigned char data) {
    while (!(UCSR0A & (1 << UDRE0))); 
    UDR0 = data; 
}
void uart_print(const char* str) {
    while (*str) {
        uart_transmit(*str++);
    }
}

// SPI-Setup: Master mode
void spi_init() {
    
    DDRB |= (1 << PB4);  // Setze MOSI, SCK und CSN als output
    SPCR |= (1 << SPE);  // aktiviere SPI, Master mode
    
}

uint8_t spi_transmit(uint8_t data) {
    SPDR = data;  
    while (!(SPSR & (1 << SPIF)));  
    return SPDR;  
}

void nrf24_csn_low() {
    PORTB &= ~(1 << CSN_PIN); 
}

void nrf24_csn_high() {
    PORTB |= (1 << CSN_PIN); 
}

void nrf24_ce_low() {
    PORTD &= ~(1 << CE_PIN);
}

void nrf24_ce_high() {
    PORTD |= (1 << CE_PIN);
}

void nrf24_write_register(uint8_t reg, uint8_t value) {
    nrf24_csn_low();
    spi_transmit(0x20 | reg);
    spi_transmit(value);  
    nrf24_csn_high();
}

void nrf24_read_payload(uint8_t* data, uint8_t groesse) {
    nrf24_csn_low();
    spi_transmit(0x61);  //RX payload
    for (uint8_t i = 0; i < groesse; i++) {
        data[i] = spi_transmit(0xFF);  // Receive data
    }
    nrf24_csn_high();
}

void nrf24_init() {
    
    DDRD |= (1 << CE_PIN);
    DDRB |= (1 << CSN_PIN);

    
    nrf24_ce_low();
    nrf24_csn_high();

    
    spi_init();

    
    nrf24_write_register(0x00, 0x0F);  // RX modus aktivieren
    nrf24_write_register(0x01, 0x00);  // auto-ack deaktivieren
    nrf24_write_register(0x02, 0x01);  // pipe 0 für nachrichten
    nrf24_write_register(0x05, 0x02);  // kanal auf 2 senden
    nrf24_write_register(0x06, 0x06);  // 1 Mbit

    
    nrf24_ce_high();
}

void pwm_init() {
    // Fast PWM für DC motor (Timer 0)
    TCCR0A = (1 << WGM00) | (1 << WGM01) | (1 << COM0A1); 
    TCCR0B = (1 << CS01);  

    // Fast PWM for Servo (using Timer 1)
    /*TCCR1A = (1 << WGM11) | (1 << COM1A1);  
    TCCR1B = (1 << WGM12) | (1 << WGM13) | (1 << CS11);  
    ICR1 = 39999;  // 50Hz (20ms period) 
    DDRD |= (1<<PB1); */
  
  TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM11);
  TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS11) | (1<<CS10);
  ICR1 = 4999;
  DDRB |= (1<<PB1); 

}



 void richtung_steuerung(int8_t value_2, uint8_t richtung)
{
  if (richtung == 0)
  {
    PORTD |= (1<<MOTOR_IN1);
    PORTD &= ~(1<<MOTOR_IN2);
  }
  else if (richtung == 1)
  {
    PORTD |= (1<<MOTOR_IN2);
    PORTD &= ~(1<<MOTOR_IN1);
  }
  

  OCR0A = value_2;
}



   void set_servo_position(uint8_t position) {
      //OCR1A für servo
       OCR1A = position + 200;
   }

int main() {
    
    pwm_init();

   
    nrf24_init();
    
    
    uint8_t data[3];
    uint8_t richtung;  

      while (1) {
        
        nrf24_read_payload(data, 3);
        richtung = data[2];
        set_servo_position(data[0]);  
        richtung_steuerung(data[1], richtung);
        //set_motor_speed(data[1]);  

        Serial.begin(9600);

        while(!Serial);
        Serial.println(data[0]);
         _delay_ms(100);  // 
      }
}
